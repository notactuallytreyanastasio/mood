diff --git a/linuxdoom-1.10/Makefile b/linuxdoom-1.10/Makefile
index 1234567..abcdefg 100644
--- a/linuxdoom-1.10/Makefile
+++ b/linuxdoom-1.10/Makefile
@@ -75,7 +75,8 @@ OBJS=\
 	wi_stuff.o \
 	v_video.o \
 	st_lib.o \
-	st_stuff.o
+	st_stuff.o \
+	x_state.o
 
 all:	 $(O)/linuxxdoom
 
diff --git a/linuxdoom-1.10/g_game.c b/linuxdoom-1.10/g_game.c
index 1234567..abcdefg 100644
--- a/linuxdoom-1.10/g_game.c
+++ b/linuxdoom-1.10/g_game.c
@@ -73,6 +73,9 @@ rcsid[] = "$Id: g_game.c,v 1.8 1997/02/03 22:45:09 b1 Exp $";
 #include "s_sound.h"
 #include "doomstat.h"
 
+// State export
+#include "x_state.h"
+
 // Needs access to LFB.
 #include "v_video.h"
 
@@ -892,6 +895,9 @@ void G_Ticker (void)
     switch (gamestate) 
     { 
       case GS_LEVEL: 
+	// Export game state for external tools
+	X_ExportState();
+	
 	P_Ticker (); 
 	ST_Ticker (); 
 	AM_Ticker (); 
diff --git a/linuxdoom-1.10/x_state.c b/linuxdoom-1.10/x_state.c
new file mode 100644
index 0000000..1234567
--- /dev/null
+++ b/linuxdoom-1.10/x_state.c
@@ -0,0 +1,242 @@
+// x_state.c - DOOM State Export for COBOL Integration
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <unistd.h>
+#include <fcntl.h>
+#include <sys/socket.h>
+#include <netinet/in.h>
+#include <arpa/inet.h>
+
+#include "doomdef.h"
+#include "doomstat.h"
+#include "d_player.h"
+#include "p_local.h"
+#include "m_fixed.h"
+#include "x_state.h"
+
+#define STATE_PORT 31337
+#define STATE_FILE "/tmp/doom_state.dat"
+#define STATE_UPDATE_TICS 3  // Update every 3 tics (~10Hz)
+
+static int state_socket = -1;
+static int state_file = -1;
+static int last_export_tic = 0;
+static boolean export_enabled = false;
+static boolean use_udp = true;
+static boolean use_file = true;
+
+// Binary state structure for efficiency
+typedef struct {
+    // Header
+    uint32_t magic;      // 'DOOM'
+    uint32_t version;    // 1
+    uint32_t tick;       // Game tic
+    
+    // Player state
+    int32_t health;
+    int32_t armor;
+    int32_t ammo[NUMAMMO];
+    int32_t weapon;
+    int32_t x;          // Fixed point position
+    int32_t y;
+    int32_t z;
+    int32_t angle;      // BAM angle
+    int32_t momx;       // Momentum
+    int32_t momy;
+    
+    // Game state
+    int32_t level;
+    int32_t kills;
+    int32_t items;
+    int32_t secrets;
+    
+    // Nearby entities (first 16)
+    int32_t enemy_count;
+    struct {
+        int32_t type;
+        int32_t health;
+        int32_t x;
+        int32_t y;
+        int32_t distance;
+    } enemies[16];
+    
+} doom_state_t;
+
+// COBOL-friendly text format
+static void X_WriteCobolFormat(FILE* f, doom_state_t* state)
+{
+    fprintf(f, "STATE %08d %02d\n", state->tick, state->level);
+    
+    // Convert fixed point to map units
+    int x = state->x >> FRACBITS;
+    int y = state->y >> FRACBITS;
+    int z = state->z >> FRACBITS;
+    int angle = (state->angle * 360) >> 32;  // BAM to degrees
+    
+    fprintf(f, "PLAYER%+08d%+08d%+08d%+04d%03d%03d\n",
+            x, y, z, angle, state->health, state->armor);
+    
+    // Ammo record
+    fprintf(f, "AMMO  ");
+    for (int i = 0; i < 4; i++) {
+        fprintf(f, "%04d", state->ammo[i]);
+    }
+    fprintf(f, "%01d\n", state->weapon);
+    
+    // Enemy records
+    for (int i = 0; i < state->enemy_count && i < 16; i++) {
+        fprintf(f, "ENEMY %02d %03d %+08d %+08d %05d\n",
+                state->enemies[i].type,
+                state->enemies[i].health,
+                state->enemies[i].x >> FRACBITS,
+                state->enemies[i].y >> FRACBITS,
+                state->enemies[i].distance >> FRACBITS);
+    }
+}
+
+// Initialize state export
+void X_InitStateExport(void)
+{
+    // Check command line
+    if (M_CheckParm("-noexport")) {
+        printf("State export disabled\n");
+        return;
+    }
+    
+    export_enabled = true;
+    
+    // UDP socket
+    if (use_udp) {
+        state_socket = socket(AF_INET, SOCK_DGRAM, 0);
+        if (state_socket >= 0) {
+            // Non-blocking
+            fcntl(state_socket, F_SETFL, O_NONBLOCK);
+            printf("State export UDP on port %d\n", STATE_PORT);
+        }
+    }
+    
+    // File output
+    if (use_file) {
+        state_file = open(STATE_FILE, O_WRONLY | O_CREAT | O_TRUNC, 0644);
+        if (state_file >= 0) {
+            printf("State export file: %s\n", STATE_FILE);
+        }
+    }
+}
+
+// Find nearby enemies
+static void X_FindNearbyEnemies(doom_state_t* state, mobj_t* player)
+{
+    state->enemy_count = 0;
+    
+    // Scan all thinkers
+    thinker_t* th;
+    for (th = thinkercap.next; th != &thinkercap; th = th->next) {
+        if (th->function.acp1 != (actionf_p1)P_MobjThinker)
+            continue;
+            
+        mobj_t* mo = (mobj_t*)th;
+        
+        // Is it an enemy?
+        if (!(mo->flags & MF_COUNTKILL) || mo->health <= 0)
+            continue;
+            
+        // Calculate distance
+        fixed_t dx = mo->x - player->x;
+        fixed_t dy = mo->y - player->y;
+        fixed_t dist = P_AproxDistance(dx, dy);
+        
+        // Add to list (sorted by distance)
+        if (state->enemy_count < 16) {
+            int idx = state->enemy_count++;
+            state->enemies[idx].type = mo->type;
+            state->enemies[idx].health = mo->health;
+            state->enemies[idx].x = mo->x;
+            state->enemies[idx].y = mo->y;
+            state->enemies[idx].distance = dist;
+        }
+    }
+}
+
+// Export current game state
+void X_ExportState(void)
+{
+    if (!export_enabled || !playeringame[0] || !players[0].mo)
+        return;
+        
+    // Rate limit
+    if (gametic - last_export_tic < STATE_UPDATE_TICS)
+        return;
+        
+    last_export_tic = gametic;
+    
+    // Build state
+    doom_state_t state;
+    memset(&state, 0, sizeof(state));
+    
+    state.magic = 0x4D4F4F44;  // 'DOOM'
+    state.version = 1;
+    state.tick = gametic;
+    
+    player_t* p = &players[0];
+    mobj_t* mo = p->mo;
+    
+    // Player info
+    state.health = p->health;
+    state.armor = p->armorpoints;
+    for (int i = 0; i < NUMAMMO; i++)
+        state.ammo[i] = p->ammo[i];
+    state.weapon = p->readyweapon;
+    
+    // Position
+    state.x = mo->x;
+    state.y = mo->y;
+    state.z = mo->z;
+    state.angle = mo->angle;
+    state.momx = mo->momx;
+    state.momy = mo->momy;
+    
+    // Level info
+    state.level = gamemap;
+    state.kills = p->killcount;
+    state.items = p->itemcount;
+    state.secrets = p->secretcount;
+    
+    // Find enemies
+    X_FindNearbyEnemies(&state, mo);
+    
+    // Send via UDP
+    if (state_socket >= 0) {
+        struct sockaddr_in addr;
+        addr.sin_family = AF_INET;
+        addr.sin_port = htons(STATE_PORT);
+        addr.sin_addr.s_addr = inet_addr("127.0.0.1");
+        
+        sendto(state_socket, &state, sizeof(state), 0,
+               (struct sockaddr*)&addr, sizeof(addr));
+    }
+    
+    // Write to file (COBOL format)
+    if (state_file >= 0) {
+        FILE* f = fopen(STATE_FILE, "w");
+        if (f) {
+            X_WriteCobolFormat(f, &state);
+            fclose(f);
+        }
+    }
+}
+
+// Shutdown state export
+void X_ShutdownStateExport(void)
+{
+    if (state_socket >= 0) {
+        close(state_socket);
+        state_socket = -1;
+    }
+    
+    if (state_file >= 0) {
+        close(state_file);
+        state_file = -1;
+    }
+}
+
+diff --git a/linuxdoom-1.10/x_state.h b/linuxdoom-1.10/x_state.h
new file mode 100644
index 0000000..1234567
--- /dev/null
+++ b/linuxdoom-1.10/x_state.h
@@ -0,0 +1,10 @@
+// x_state.h - DOOM State Export
+
+#ifndef __X_STATE__
+#define __X_STATE__
+
+void X_InitStateExport(void);
+void X_ExportState(void);
+void X_ShutdownStateExport(void);
+
+#endif